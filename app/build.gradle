apply plugin: 'com.android.application'

android {
    useLibrary 'org.apache.http.legacy'
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

//    configurations.all {
//        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
//    }

    defaultConfig {
        applicationId "com.example.taphan.core1test"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    jacoco {
        version "0.7.1.201405082137"
    }
}

ext {
    supportLibraryVersion = '24.2.1'
    googleApiClientVersion = '1.22.0'
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    androidTestCompile ('com.android.support.test.espresso:espresso-intents:2.2', {
        exclude module: 'support-annotations'
    })


    // cloud natural language processing

    // Support libraries
    compile "com.android.support:design:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"

    // FlexboxLayout
    compile 'com.google.android:flexbox:0.2.3'

    // Dependencies for Google API Client Libraries
    compile("com.google.http-client:google-http-client:$googleApiClientVersion") {
        exclude module: 'httpclient'
        exclude module: 'jsr305'
    }
    compile("com.google.api-client:google-api-client-android:$googleApiClientVersion"){
        exclude module: 'httpclient'
        exclude module: 'jsr305'
    }
    compile("com.google.apis:google-api-services-language:v1beta1-rev5-$googleApiClientVersion") {
        exclude module: 'httpclient'
        exclude module: 'jsr305'
    }

    // api.ai SDK dependencies
    compile 'com.android.support:appcompat-v7:25.1.1'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.google.firebase:firebase-database:10.2.0'
    compile 'com.google.firebase:firebase-auth:10.2.0'
    compile 'com.firebaseui:firebase-ui-database:1.0.0'
    compile 'ai.api:libai:1.3.5'
    compile 'ai.api:sdk:2.0.3@aar'
    compile 'commons-io:commons-io:2.4'
    compile 'com.android.support.constraint:constraint-layout:1.0.1'
    compile 'com.android.support:design:25.2.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    //compile group: 'com.google.cloud', name: 'google-cloud-language', version: '0.11.0-alpha'
}



apply plugin: 'com.google.gms.google-services'
apply plugin: 'jacoco'

jacoco {
    toolVersion "0.7.1.201405082137"
}

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    // exclude auto-generated classes and tests
    def fileFilter = ['**/R.class', '**/R$*.class',
                      '**/BuildConfig.*', '**/Manifest*.*',
                      'android/**/*.*']
    def debugTree = fileTree(dir:
            "${project.buildDir}/intermediates/classes/debug",
            excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    additionalSourceDirs = files([
            "${buildDir}/generated/source/buildConfig/debug",
            "${buildDir}/generated/source/r/debug"
    ])
    executionData = fileTree(dir: project.projectDir, includes:
            ['**/*.exec', '**/*.ec'])

    reports {
        xml.enabled = true
        xml.destination = "${buildDir}/jacocoTestReport.xml"
        csv.enabled = false
        html.enabled = true
        html.destination = "${buildDir}/reports/jacoco"
    }
}